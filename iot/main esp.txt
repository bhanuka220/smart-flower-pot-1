#include <WiFi.h>
#include <PubSubClient.h>
#include <WiFiClientSecure.h>

#define SOIL_PIN 32
#define LDR_PIN  33
#define MOTOR_PIN 25

const char* ssid = "Banuka";
const char* password = "123456780";

const char* mqtt_server = "6961f6908a664647a9c96d98193c9920.s1.eu.hivemq.cloud";
const int mqtt_port = 8883;
const char* mqtt_user = "Tharindu";
const char* mqtt_pass = "ESP123456789esp";

WiFiClientSecure secureClient;
PubSubClient client(secureClient);

int soilThreshold = 2000;
bool manualMotorControl = false;
bool motorState = false;

void setup_wifi() {
  Serial.print("Connecting to WiFi");
  WiFi.begin(ssid, password);
  int retryCount = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    retryCount++;
    if (retryCount > 40) { // 20 seconds timeout
      Serial.println("\nFailed to connect to WiFi");
      return;
    }
  }
  Serial.println("\nWiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  payload[length] = '\0';
  String msg = (char*)payload;

  Serial.print("MQTT Message arrived [");
  Serial.print(topic);
  Serial.print("]: ");
  Serial.println(msg);

  if (String(topic) == "esp32/control/motor") {
    if (msg == "on") {
      manualMotorControl = true;
      motorState = true;
      Serial.println("Motor manual ON");
    } else if (msg == "off") {
      manualMotorControl = true;
      motorState = false;
      Serial.println("Motor manual OFF");
    } else if (msg == "auto") {
      manualMotorControl = false;
      Serial.println("Motor set to AUTO control");
    }
    digitalWrite(MOTOR_PIN, motorState ? HIGH : LOW);
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP32_1", mqtt_user, mqtt_pass)) {
      Serial.println("connected");
      client.subscribe("esp32/control/motor");
    } else {
      Serial.print("failed, rc=");
      Serial.println(client.state());
      delay(2000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(SOIL_PIN, INPUT);
  pinMode(LDR_PIN, INPUT);
  pinMode(MOTOR_PIN, OUTPUT);
  digitalWrite(MOTOR_PIN, LOW);

  setup_wifi();

  secureClient.setInsecure();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  Serial.println("Setup complete");
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  int soil = analogRead(SOIL_PIN);
  int light = analogRead(LDR_PIN);
  Serial.print("Sensor readings - Soil: ");
  Serial.print(soil);
  Serial.print(", Light: ");
  Serial.println(light);

  if (!manualMotorControl) {
    bool prevMotorState = motorState;
    motorState = (soil < soilThreshold);
    if (motorState != prevMotorState) {
      Serial.print("Motor auto-control changed: ");
      Serial.println(motorState ? "ON" : "OFF");
    }
    digitalWrite(MOTOR_PIN, motorState ? HIGH : LOW);
  }

  String payload = "{\"soil\":" + String(soil) +
                   ",\"light\":" + String(light) +
                   ",\"motor\":" + String(motorState ? "true" : "false") + "}";

  Serial.print("Publishing payload: ");
  Serial.println(payload);

  if (!client.publish("esp32/sensorData", payload.c_str())) {
    Serial.println("Publish failed");
  }

  delay(2000);
}